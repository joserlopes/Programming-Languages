let filter = fn pred: int->bool => list<int>->list<int>
        { fn l: list<int> => list<int>
        { match l {
                | nil -> nil
                | v :: tail -> if (pred(v)) {
                    cons(v, filter(pred)(tail))
                } else {
                    filter(pred)(tail)
                }
        }
}};
let myList = cons(1, cons(2, cons(3, cons(2, cons(2, nil)))));
filter(fn x: int => { x == 2 })(myList);;
