PARSER_BEGIN(Parser)

package L0;

import L0.AST.*;
import L0.ASTType.*;
import java.util.*;

public class Parser {
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN :
{

  < LET : "let" >
  |
  < TYPE : "type" >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < STAR : "*">
  |
  < BANG : "!">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < LBRA : "{" >
  |
  < RBRA : "}" >
  |
  < LSBRA : "[" >
  |
  < RSBRA : "]" >
  |
  < EQUAL : "=" >
  |
  < DOT : "." >
  |
  < COLON : ":" >
  |
  < POUND : "#" >
  |
  < DCOLON : "::" >
  |
  < SEMIC : ";" >
  |
  < TERM : ";;" >
  |
  < COMMA : "," >
  |
  < AND : "&&" >
  |
  < OR : "||" >
  |
  < EQ : "==" >
  |  
  < GT : ">" >
  |
  < LT : "<" >
  |
  < GTEQ : ">=" >
  |
  < LTEQ : "<=" >
  |
  < DIF : "!=" >
  |
  < NOT : "~" >
  |
  < ASSIGN : ":=" >
  |
  < BOX : "box" >
  |
  < IF : "if" >
  |
  < ELSE : "else" >
  |
  < WHILE : "while" >
  |
  < PRINT : "print" >
  |
  < PRINTLN : "println" >
  |
  < FN : "fn" >
  |
  < FAT_ARROW : "=>">
  |
  < NIL : "nil">
  |
  < CONS : "cons">
  |
  < LCONS : "lcons">
  |
  < MATCH : "match">
  |
  < PIPE : "|">
  |
  < PIPENIL : "| nil">
  |
  < ARROW : "->">
  |
  < INT : "int">
  |
  < UNIT : "()">
  |
  < BOOL : "bool">
  |
  < STRING : "string">
  |
  < LIST : "list">
  |
  < REF : "ref">
  |
  < UNION : "union">
  |
  < STRUCT : "struct">
  |
  < String: "\"" ( (~["\"","\\"]) | ("\\" ( ["n","t","b","r","f","\\","\""] ) ) )* "\"" >
  |
  < Id: ["a"-"z","A"-"Z", "_"] ( ["_", "a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Label: "#" ["a"-"z","A"-"Z", "_"] ( ["_", "a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
}

ASTNode Start():
{ ASTNode t; }
{
    <EOF> { return null; }
  | t = Let() <TERM> { return t; }
}

ASTNode Let() :
{ Token n; 
  ASTNode t, e1, e2;
  ASTType t1 = null;
}
{  
    (
      t = Seq()
    | 
    {  List<TypedBind> decls  = new ArrayList<TypedBind>(); }
    ( ( LOOKAHEAD(2) <LET>  n=<Id> (<COLON> t1 = Type())? <EQUAL> e1 = BA() <SEMIC> 
      { decls.add(new TypedBind(n.image, e1, t1)); t1 = null;} )+
        e2 = Let() { t = new ASTLet(decls, e2); }
    )
| 
     {  HashMap<String,ASTType> lbl = new HashMap<String,ASTType>(); }
   ( (LOOKAHEAD(2) <TYPE>  n=<Id>  <EQUAL> t1 = Type()  <SEMIC>
      { lbl.put(n.image, t1); } )+ 
        e2 = Let() { t = new ASTTypeDef(lbl, e2); }
    )
    )
   { return t; }
}

ASTNode Seq() :
{Token op;
  ASTNode t1, t2;
  List<ASTNode> exps = new ArrayList<ASTNode>();
  }
{
     t1 = SeqExp()
     {
        exps.add(t1);
     }
     ( ( op=<SEMIC> ) t2 = SeqExp() 
 		 {
		 exps.add(t2);
     } 
		)*
     { 
         if (exps.size() == 1) {
             return t1;
         } else {
             return new ASTSeq(exps);
         }
     }  
}

ASTNode SeqExp() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = BA() ( ( op=<ASSIGN> ) t2 = SeqExp() 
 		 {
		 t1 = new ASTAssign(t1, t2);
     } 
		)?
     { return t1; }  
}

ASTNode BA() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = BM() ( ( op=<OR> ) t2 = BM() 
 		 {
            t1 = new ASTOr(t1, t2);
		 } 
		)*
     { return t1; } 
}

ASTNode BM() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Rel() ( ( op=<AND> ) t2 = Rel() 
 		 {
            t1 = new ASTAnd(t1, t2);
 		 } 
		)*
     { return t1; } 
}


ASTNode Rel() :
{Token op;
  ASTNode t1, t2;}
{
     t1 = Exp() ( ( op=<EQ> | op=<GT> | op=<LT> | op=<GTEQ> | op=<LTEQ> | op=<DIF>) t2 = Exp() 
     	  	  { if (op.kind == EQ)
                    t1 = new ASTEq(t1, t2);
                else if (op.kind == GT)
                    t1 = new ASTGt(t1, t2);
                else if (op.kind == LT)
                    t1 = new ASTLt(t1, t2);
                else if (op.kind == GTEQ)
                    t1 = new ASTGteq(t1, t2);
                else if (op.kind == LTEQ)
                    t1 = new ASTLteq(t1, t2);
                else if (op.kind == DIF)
                    t1 = new ASTDif(t1, t2);
		   } 
		)?
     { return t1; } 
}


ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}

ASTNode Term() :
{Token op;
  ASTNode t1, t2; }
{
     t1 = Field() (
        op=<STAR> t2 = Field()   { t1 = new ASTMult(t1, t2); }
		|
		op=<DIV> t2 = Field()  { t1 = new ASTDiv(t1, t2); }
        |
		op = <LPAR> t2 = Let() <RPAR>  { t1 = new ASTFunCall(t1, t2); } 
        |
		op = <UNIT> { t1 = new ASTFunCall(t1, null); } 
		)*
     { return t1; } 
}

ASTNode Field():
{ Token op; 
  ASTNode t;
}
{
     t = Fact() ( op=<DOT> op = <Label>  { t = new ASTDot(t, op.image); })* { return t; }
}

ASTNode Fun() : 
{
Token n; 
ASTNode t, e1 = null, e2;
ASTType at1;
}
{
      <FN> n=<Id> <COLON> at1 = Type()
      { t = new ASTFunDecl(n.image, at1, null); e1 = t;}
      ( <COMMA> n = <Id> <COLON> at1 = Type() { 
          e2 = new ASTFunDecl(n.image, at1, null);
		  ((ASTFunDecl)e1).setBody(e2); 
          e1 = e2; 
          })*
		  <FAT_ARROW> <LBRA> e2 = Let() <RBRA> 
          { ((ASTFunDecl)e1).setBody(e2); }
      { return t; } 
}

ASTNode Match():
{
Token n1, n2 = null;
ASTNode t, e1, e2;
List<UnionBind> fields = new ArrayList<UnionBind>();
}
{
    
     <MATCH> t = Term() <LBRA>
        (<PIPENIL>
        <ARROW> e1 = Let()
        <PIPE> n1=<Id> <DCOLON> n2=<Id> <ARROW> e2 = Let()
      <RBRA>
        { return new ASTMatchList(t, e1, n1.image, n2.image, e2); }
     |
      (
      <PIPE> n1=<Label> (<LPAR> n2 = <Id> <RPAR>)? <ARROW> e2 = Let() 
      { 
          if (n2 == null) {
            fields.add(new UnionBind(n1.image, null, e2)); 
          } else {
            fields.add(new UnionBind(n1.image, n2.image, e2)); 
          }
      }
      )*
      <RBRA>
     { return new ASTMatchUnion(t, fields); }
     )
}

ASTNode Record():
{
Token n = null;
ASTNode e1 = null;
List<Bind> fields = new ArrayList<Bind>();
}
{
    <LBRA> 
    (
        n=<Label> <EQUAL> e1= BA()
        { 
            if (n == null && e1 == null) {
                return new ASTRecord(fields); 
            } else {
                fields.add(new Bind(n.image, e1));
            }
        }
        (
        <COMMA> n=<Label> <EQUAL> e1 = BA()
        { 
            for (Bind bind: fields) {
                if (bind.getId().equals(n.image)) {
                    throw new ParseException();
                }
            }
            fields.add(new Bind(n.image, e1)); 
        }
        )*
    )?
    <RBRA>
    { return new ASTRecord(fields); }
}

ASTNode Union():
{
Token n;
ASTNode e1 = null;
List<Bind> fields = new ArrayList<Bind>();
}
{
    n = <Label> 
    (
        <UNIT>
        |
        <LPAR> e1 = Let() <RPAR>
    )
    { 
        fields.add(new Bind(n.image, e1)); 
    } 

    { return new ASTUnion(fields); }
}

ASTNode Fact() :
{ Token n, n2; 
  ASTNode t, e1, e2;
  List<String> params  = new ArrayList<String>();
  ASTNode  body, alt;
}
{
   (
      n=<Num> { t = new ASTInt(Integer.parseInt(n.image)); } 
    | n=<String> { t = new ASTString(n.image); }
    | n=<TRUE> { t = new ASTBool(Boolean.parseBoolean(n.image)); }
    | n=<FALSE> { t = new ASTBool(Boolean.parseBoolean(n.image)); }
    | n=<Id> { t = new ASTId(n.image); }
    | <UNIT> { t = new ASTUnit(); } 
    | <BOX> t=Fact() { t = new ASTBox(t); }
    | <STAR> t=Fact() { t = new ASTDeref(t); }
    | <MINUS> t=Fact() { t = new ASTNeg(t); }
    | <NOT> t=Fact() { t = new ASTNot(t);  }
    | <IF> t=BA() <LBRA> e1=Let() <RBRA> <ELSE> <LBRA> e2=Let() <RBRA> { 
        t = new ASTIf(t, e1, e2); 
    }
    | <WHILE> t=BA() <LBRA> body=Let() <RBRA> { t = new ASTWhile(t, body); }
    | t = Fun()
    | <PRINT> t=Fact() { t = new ASTPrint(t);  }
    | <PRINTLN> t=Fact() { t = new ASTPrint(t, true); }
    | <LPAR> t=Let() <RPAR> 
    | <NIL> { t = new ASTNil(); }
    | <CONS> <LPAR> t = BA() <COMMA> e1 = BA() <RPAR> { t = new ASTCons(t, e1); }
    | <LCONS> <LPAR> t = BA() <COMMA> e1 = BA() <RPAR> { t = new ASTLCons(t, e1); }
    | t = Match()
    | t = Record()
    | t = Union()
    )
   { return t; }
}

ASTType Type() : 
{
  ASTType t1, t2;
}
{        
    t1 = TypeF() (<ARROW> t2 = Type() { t1 = new ASTTArrow(t1,t2);} )?
    { return t1; }
}

TypeBindList RecordLabelList() :
{
  ASTType t;
  HashMap<String, ASTType> ll;
  Token n;
}
{   { ll = new HashMap<String, ASTType>() ; }
    ( n=<Label> <COLON> t = Type() { ll.put(n.image,t); } 
              (<COMMA> n=<Label> <COLON> t = Type() { ll.put(n.image,t);} )*
    )?
    { return new TypeBindList(ll); }
}

TypeBindList UnionLabelList() :
{
  ASTType t;
  HashMap<String,ASTType> ll;
  Token n;
}
{   { ll = new HashMap<String, ASTType>() ; }
    ( n=<Label> <COLON> t = Type() { ll.put(n.image, t); } 
              (<COMMA> n=<Label> <COLON> t = Type() { ll.put(n.image, t);} )*
    )?
    { return new TypeBindList(ll); }
}

ASTType TypeF() : 
{
  ASTType t;
  TypeBindList ll;
  Token n;
}
{        
    ( 
          <INT> { t = new ASTTInt(); } 
        | n=<Id> { t = new ASTTId(n.image); } 
        | <BOOL> { t = new ASTTBool(); } 
        | <UNIT> { t = new ASTTUnit(); } 
        | <STRING> { t = new ASTTString(); } 
        | <LPAR> t = Type() <RPAR>
        | <REF> <LT> t=Type() <GT> { t = new ASTTBox(t); }
        | <LIST> <LT> t=Type() <GT> { t = new ASTTList(t); }
        | <STRUCT> <LBRA> ll = RecordLabelList() <RBRA> { t = new ASTTRecord(ll); return t; }
        | <UNION> <LSBRA> ll = UnionLabelList() <RSBRA> { t = new ASTTUnion(ll); return t; }
    )
    { return t; }
}
