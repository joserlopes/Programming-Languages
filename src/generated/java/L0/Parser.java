/* Generated By:JavaCC: Do not edit this line. Parser.java */
package L0;

import L0.AST.*;
import L0.ASTType.*;
import java.util.*;

public class Parser implements ParserConstants {

  static final public ASTNode Start() throws ParseException {
  ASTNode t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
            {if (true) return null;}
      break;
    case LET:
    case TYPE:
    case TRUE:
    case FALSE:
    case MINUS:
    case STAR:
    case LPAR:
    case LBRA:
    case NOT:
    case BOX:
    case IF:
    case WHILE:
    case PRINT:
    case PRINTLN:
    case FN:
    case NIL:
    case CONS:
    case LCONS:
    case MATCH:
    case UNIT:
    case String:
    case Id:
    case Label:
    case Num:
      t = Let();
      jj_consume_token(TERM);
                       {if (true) return t;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Let() throws ParseException {
  Token n;
  ASTNode t, e1, e2;
  ASTType t1 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case MINUS:
    case STAR:
    case LPAR:
    case LBRA:
    case NOT:
    case BOX:
    case IF:
    case WHILE:
    case PRINT:
    case PRINTLN:
    case FN:
    case NIL:
    case CONS:
    case LCONS:
    case MATCH:
    case UNIT:
    case String:
    case Id:
    case Label:
    case Num:
      t = Seq();
      break;
    case LET:
       List<TypedBind> decls  = new ArrayList<TypedBind>();
      label_1:
      while (true) {
        jj_consume_token(LET);
        n = jj_consume_token(Id);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON:
          jj_consume_token(COLON);
          t1 = Type();
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
        jj_consume_token(EQUAL);
        e1 = BA();
        jj_consume_token(SEMIC);
        decls.add(new TypedBind(n.image, e1, t1)); t1 = null;
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
      }
      e2 = Let();
                     t = new ASTLet(decls, e2);
      break;
    case TYPE:
        HashMap<String,ASTType> lbl = new HashMap<String,ASTType>();
      label_2:
      while (true) {
        jj_consume_token(TYPE);
        n = jj_consume_token(Id);
        jj_consume_token(EQUAL);
        t1 = Type();
        jj_consume_token(SEMIC);
        lbl.put(n.image, t1);
        if (jj_2_2(2)) {
          ;
        } else {
          break label_2;
        }
      }
      e2 = Let();
                     t = new ASTTypeDef(lbl, e2);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Seq() throws ParseException {
 Token op;
  ASTNode t1, t2;
  List<ASTNode> exps = new ArrayList<ASTNode>();
    t1 = SeqExp();
        exps.add(t1);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMIC:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      op = jj_consume_token(SEMIC);
      t2 = SeqExp();
                 exps.add(t2);
    }
         if (exps.size() == 1) {
             {if (true) return t1;}
         } else {
             {if (true) return new ASTSeq(exps);}
         }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode SeqExp() throws ParseException {
 Token op;
  ASTNode t1, t2;
    t1 = BA();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      op = jj_consume_token(ASSIGN);
      t2 = SeqExp();
                 t1 = new ASTAssign(t1, t2);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode BA() throws ParseException {
 Token op;
  ASTNode t1, t2;
    t1 = BM();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      op = jj_consume_token(OR);
      t2 = BM();
            t1 = new ASTOr(t1, t2);
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode BM() throws ParseException {
 Token op;
  ASTNode t1, t2;
    t1 = Rel();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      op = jj_consume_token(AND);
      t2 = Rel();
            t1 = new ASTAnd(t1, t2);
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Rel() throws ParseException {
 Token op;
  ASTNode t1, t2;
    t1 = Exp();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case GT:
    case LT:
    case GTEQ:
    case LTEQ:
    case DIF:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        op = jj_consume_token(EQ);
        break;
      case GT:
        op = jj_consume_token(GT);
        break;
      case LT:
        op = jj_consume_token(LT);
        break;
      case GTEQ:
        op = jj_consume_token(GTEQ);
        break;
      case LTEQ:
        op = jj_consume_token(LTEQ);
        break;
      case DIF:
        op = jj_consume_token(DIF);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Exp();
                    if (op.kind == EQ)
                    t1 = new ASTEq(t1, t2);
                else if (op.kind == GT)
                    t1 = new ASTGt(t1, t2);
                else if (op.kind == LT)
                    t1 = new ASTLt(t1, t2);
                else if (op.kind == GTEQ)
                    t1 = new ASTGteq(t1, t2);
                else if (op.kind == LTEQ)
                    t1 = new ASTLteq(t1, t2);
                else if (op.kind == DIF)
                    t1 = new ASTDif(t1, t2);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Exp() throws ParseException {
  Token op;
  ASTNode t1, t2;
    t1 = Term();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        op = jj_consume_token(PLUS);
        break;
      case MINUS:
        op = jj_consume_token(MINUS);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = Term();
                   if (op.kind == PLUS)
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Term() throws ParseException {
 Token op;
  ASTNode t1, t2;
    t1 = Field();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case DIV:
      case LPAR:
      case UNIT:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        op = jj_consume_token(STAR);
        t2 = Field();
                                   t1 = new ASTMult(t1, t2);
        break;
      case DIV:
        op = jj_consume_token(DIV);
        t2 = Field();
                                         t1 = new ASTDiv(t1, t2);
        break;
      case LPAR:
        op = jj_consume_token(LPAR);
        t2 = Let();
        jj_consume_token(RPAR);
                                                 t1 = new ASTFunCall(t1, t2);
        break;
      case UNIT:
        op = jj_consume_token(UNIT);
                              t1 = new ASTFunCall(t1, null);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
       {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Field() throws ParseException {
  Token op;
  ASTNode t;
    t = Fact();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      op = jj_consume_token(DOT);
      op = jj_consume_token(Label);
                                           t = new ASTDot(t, op.image);
    }
                                                                              {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Fun() throws ParseException {
Token n;
ASTNode t, e1 = null, e2;
ASTType at1;
    jj_consume_token(FN);
    n = jj_consume_token(Id);
    jj_consume_token(COLON);
    at1 = Type();
        t = new ASTFunDecl(n.image, at1, null); e1 = t;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      n = jj_consume_token(Id);
      jj_consume_token(COLON);
      at1 = Type();
          e2 = new ASTFunDecl(n.image, at1, null);
                  ((ASTFunDecl)e1).setBody(e2);
          e1 = e2;
    }
    jj_consume_token(FAT_ARROW);
    jj_consume_token(LBRA);
    e2 = Let();
    jj_consume_token(RBRA);
            ((ASTFunDecl)e1).setBody(e2);
        {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Match() throws ParseException {
Token n1, n2 = null;
ASTNode t, e1, e2;
List<UnionBind> fields = new ArrayList<UnionBind>();
    jj_consume_token(MATCH);
    t = Term();
    jj_consume_token(LBRA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PIPENIL:
      jj_consume_token(PIPENIL);
      jj_consume_token(ARROW);
      e1 = Let();
      jj_consume_token(PIPE);
      n1 = jj_consume_token(Id);
      jj_consume_token(DCOLON);
      n2 = jj_consume_token(Id);
      jj_consume_token(ARROW);
      e2 = Let();
      jj_consume_token(RBRA);
          {if (true) return new ASTMatchList(t, e1, n1.image, n2.image, e2);}
      break;
    case RBRA:
    case PIPE:
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PIPE:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_10;
        }
        jj_consume_token(PIPE);
        n1 = jj_consume_token(Label);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
          jj_consume_token(LPAR);
          n2 = jj_consume_token(Id);
          jj_consume_token(RPAR);
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        jj_consume_token(ARROW);
        e2 = Let();
          if (n2 == null) {
            fields.add(new UnionBind(n1.image, null, e2));
          } else {
            fields.add(new UnionBind(n1.image, n2.image, e2));
          }
      }
      jj_consume_token(RBRA);
       {if (true) return new ASTMatchUnion(t, fields);}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Record() throws ParseException {
Token n = null;
ASTNode e1 = null;
List<Bind> fields = new ArrayList<Bind>();
    jj_consume_token(LBRA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Label:
      n = jj_consume_token(Label);
      jj_consume_token(EQUAL);
      e1 = BA();
            if (n == null && e1 == null) {
                {if (true) return new ASTStruct(fields);}
            } else {
                fields.add(new Bind(n.image, e1));
            }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        n = jj_consume_token(Label);
        jj_consume_token(EQUAL);
        e1 = BA();
            for (Bind bind: fields) {
                if (bind.getId().equals(n.image)) {
                    {if (true) throw new ParseException();}
                }
            }
            fields.add(new Bind(n.image, e1));
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(RBRA);
      {if (true) return new ASTStruct(fields);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Union() throws ParseException {
Token n;
ASTNode e1 = null;
List<Bind> fields = new ArrayList<Bind>();
    n = jj_consume_token(Label);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNIT:
      jj_consume_token(UNIT);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      e1 = Let();
      jj_consume_token(RPAR);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        fields.add(new Bind(n.image, e1));
      {if (true) return new ASTUnion(fields);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTNode Fact() throws ParseException {
  Token n, n2;
  ASTNode t, e1, e2;
  List<String> params  = new ArrayList<String>();
  ASTNode  body, alt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Num:
      n = jj_consume_token(Num);
                t = new ASTInt(Integer.parseInt(n.image));
      break;
    case String:
      n = jj_consume_token(String);
                   t = new ASTString(n.image);
      break;
    case TRUE:
      n = jj_consume_token(TRUE);
                 t = new ASTBool(Boolean.parseBoolean(n.image));
      break;
    case FALSE:
      n = jj_consume_token(FALSE);
                  t = new ASTBool(Boolean.parseBoolean(n.image));
      break;
    case Id:
      n = jj_consume_token(Id);
               t = new ASTId(n.image);
      break;
    case UNIT:
      jj_consume_token(UNIT);
               t = new ASTUnit();
      break;
    case BOX:
      jj_consume_token(BOX);
      t = Fact();
                       t = new ASTBox(t);
      break;
    case STAR:
      jj_consume_token(STAR);
      t = Fact();
                        t = new ASTDeref(t);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      t = Fact();
                         t = new ASTNeg(t);
      break;
    case NOT:
      jj_consume_token(NOT);
      t = Fact();
                       t = new ASTNot(t);
      break;
    case IF:
      jj_consume_token(IF);
      t = BA();
      jj_consume_token(LBRA);
      e1 = Let();
      jj_consume_token(RBRA);
      jj_consume_token(ELSE);
      jj_consume_token(LBRA);
      e2 = Let();
      jj_consume_token(RBRA);
        t = new ASTIf(t, e1, e2);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      t = BA();
      jj_consume_token(LBRA);
      body = Let();
      jj_consume_token(RBRA);
                                                t = new ASTWhile(t, body);
      break;
    case FN:
      t = Fun();
      break;
    case PRINT:
      jj_consume_token(PRINT);
      t = Fact();
                         t = new ASTPrint(t);
      break;
    case PRINTLN:
      jj_consume_token(PRINTLN);
      t = Fact();
                           t = new ASTPrint(t, true);
      break;
    case LPAR:
      jj_consume_token(LPAR);
      t = Let();
      jj_consume_token(RPAR);
      break;
    case NIL:
      jj_consume_token(NIL);
              t = new ASTNil();
      break;
    case CONS:
      jj_consume_token(CONS);
      jj_consume_token(LPAR);
      t = BA();
      jj_consume_token(COMMA);
      e1 = BA();
      jj_consume_token(RPAR);
                                                        t = new ASTCons(t, e1);
      break;
    case LCONS:
      jj_consume_token(LCONS);
      jj_consume_token(LPAR);
      t = BA();
      jj_consume_token(COMMA);
      e1 = BA();
      jj_consume_token(RPAR);
                                                         t = new ASTLCons(t, e1);
      break;
    case MATCH:
      t = Match();
      break;
    case LBRA:
      t = Record();
      break;
    case Label:
      t = Union();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static final public ASTType Type() throws ParseException {
  ASTType t1, t2;
    t1 = TypeF();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARROW:
      jj_consume_token(ARROW);
      t2 = Type();
                                        t1 = new ASTTArrow(t1,t2);
      break;
    default:
      jj_la1[22] = jj_gen;
      ;
    }
      {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  static final public TypeBindList RecordLabelList() throws ParseException {
  ASTType t;
  HashMap<String, ASTType> ll;
  Token n;
      ll = new HashMap<String, ASTType>() ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Label:
      n = jj_consume_token(Label);
      jj_consume_token(COLON);
      t = Type();
                                     ll.put(n.image,t);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        n = jj_consume_token(Label);
        jj_consume_token(COLON);
        t = Type();
                                                      ll.put(n.image,t);
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
      {if (true) return new TypeBindList(ll);}
    throw new Error("Missing return statement in function");
  }

  static final public TypeBindList UnionLabelList() throws ParseException {
  ASTType t;
  HashMap<String,ASTType> ll;
  Token n;
      ll = new HashMap<String, ASTType>() ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Label:
      n = jj_consume_token(Label);
      jj_consume_token(COLON);
      t = Type();
                                     ll.put(n.image, t);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_13;
        }
        jj_consume_token(COMMA);
        n = jj_consume_token(Label);
        jj_consume_token(COLON);
        t = Type();
                                                      ll.put(n.image, t);
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
      {if (true) return new TypeBindList(ll);}
    throw new Error("Missing return statement in function");
  }

  static final public ASTType TypeF() throws ParseException {
  ASTType t;
  TypeBindList ll;
  Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
                  t = new ASTTInt();
      break;
    case Id:
      n = jj_consume_token(Id);
                   t = new ASTTId(n.image);
      break;
    case BOOL:
      jj_consume_token(BOOL);
                   t = new ASTTBool();
      break;
    case UNIT:
      jj_consume_token(UNIT);
                   t = new ASTTUnit();
      break;
    case STRING:
      jj_consume_token(STRING);
                     t = new ASTTString();
      break;
    case LPAR:
      jj_consume_token(LPAR);
      t = Type();
      jj_consume_token(RPAR);
      break;
    case REF:
      jj_consume_token(REF);
      jj_consume_token(LT);
      t = Type();
      jj_consume_token(GT);
                                     t = new ASTTBox(t);
      break;
    case LIST:
      jj_consume_token(LIST);
      jj_consume_token(LT);
      t = Type();
      jj_consume_token(GT);
                                      t = new ASTTList(t);
      break;
    case STRUCT:
      jj_consume_token(STRUCT);
      jj_consume_token(LBRA);
      ll = RecordLabelList();
      jj_consume_token(RBRA);
                                                          t = new ASTTStruct(ll); {if (true) return t;}
      break;
    case UNION:
      jj_consume_token(UNION);
      jj_consume_token(LBRA);
      ll = UnionLabelList();
      jj_consume_token(RBRA);
                                                        t = new ASTTUnion(ll); {if (true) return t;}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(Id)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(LET)) return true;
    if (jj_scan_token(Id)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[28];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x14de1,0x100000,0x14de0,0x800000,0x0,0x8000000,0x4000000,0xf0000000,0xf0000000,0x600,0x600,0x6800,0x6800,0x80000,0x2000000,0x0,0x4000,0x20000,0x2000000,0x0,0x4000,0x14d80,0x0,0x2000000,0x0,0x2000000,0x0,0x4000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x7810f7b4,0x0,0x7810f7b4,0x0,0x8,0x0,0x0,0x3,0x3,0x0,0x0,0x100000,0x100000,0x0,0x0,0x10000,0x0,0x30000,0x0,0x20000000,0x100000,0x7810f7b4,0x40000,0x0,0x20000000,0x0,0x20000000,0x17f80000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 28; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 28; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
